// src/reading/reading.controller.ts
import { Controller } from '@nestjs/common';
import { MessagePattern, Payload } from '@nestjs/microservices';
import { ReadingService } from './reading.service';
import {
  CreateReadingProgressDto,
  UpdateReadingProgressDto,
} from './dto/reading-progress.dto';
import { patterns } from '../patterns';

@Controller()
export class ReadingController {
  constructor(private readonly service: ReadingService) {}

  // üü¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ–≥—Ä–µ—Å—É
  @MessagePattern(patterns.READING.CREATE)
  create(@Payload() dto: CreateReadingProgressDto) {
    return this.service.create(dto);
  }

  // üîµ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥, —è–∫—ñ —á–∏—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  @MessagePattern(patterns.READING.GET_BY_USER)
  getByUser(@Payload() userId: string) {
    return this.service.getByUser(userId);
  }

  // üü° –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É —á–∏—Ç–∞–Ω–Ω—è
  @MessagePattern(patterns.READING.UPDATE)
  update(@Payload() payload: { id: string; data: UpdateReadingProgressDto }) {
    return this.service.update(payload.id, payload.data);
  }
}
