services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # для web-интерфейса RabbitMQ
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: always


  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    environment:
      RABBITMQ_URL: amqp://rabbitmq:5672
      BROKER_URI: amqp://rabbitmq:5672
      USER_SERVICE_QUEUE: user_service_queue
      PORT: 3000
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
    ports:
      - "3000:3000"

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    environment:
      RABBITMQ_URL: amqp://rabbitmq:5672
      DATABASE_URL: postgres://postgres:password@postgres:5432/postgres
      PORT: 5001
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
    ports:
      - "5001:5001"

  book-service:
    build:
      context: ./book-service
    container_name: book-service
    environment:
      RABBITMQ_URL: amqp://rabbitmq:5672
      DATABASE_URL: postgres://postgres:password@postgres:5432/postgres
      PORT: 5002
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
    ports:
      - "5002:5002"

volumes:
  pgdata:
