import {
  Injectable,
  NotFoundException,
  UnauthorizedException,
  Logger,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../../entities/user.entity';
import { Role } from '../../entities/role.entity';
import * as bcrypt from 'bcryptjs';
import { Tokens } from '../auth/dto';
import { UserDTO } from './dto';
import { AuthService } from '../auth/auth.service';
import { RpcException } from '@nestjs/microservices';
import { QueryFailedError } from 'typeorm';

@Injectable()
export class UserService {
  private readonly logger = new Logger(UserService.name);

  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,

    @InjectRepository(Role)
    private readonly roleRepository: Repository<Role>,

    private readonly authService: AuthService, // ‚úÖ –ü—Ä—è–º–∏–π —ñ–Ω–∂–µ–∫—Ç —Å–µ—Ä–≤—ñ—Å—É
  ) {}

  async createUser(dto: UserDTO): Promise<User> {
    const hashedPassword = await bcrypt.hash(dto.password, 10);
    const roleName =
      !dto.role || dto.role === 'null' || dto.role === '' ? 'user' : dto.role;

    const role = await this.roleRepository.findOne({
      where: { name: roleName },
    });

    if (!role) {
      throw new NotFoundException(`Role '${roleName}' not found`);
    }

    const newUser = new User();
    newUser.name = dto.name;
    newUser.email = dto.email;
    newUser.password = hashedPassword;
    newUser.role = role;
    newUser.role_id = role.id;

    this.logger.log(`üìå Creating user with email: ${dto.email}`);

    try {
      return await this.userRepository.save(newUser);
    } catch (error) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–æ–º–∏–ª–∫–∞ TypeORM —ñ —á–∏ —Ü–µ –¥—É–±–ª—ñ–∫–∞—Ç
      if (
        error instanceof QueryFailedError &&
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        (error as any).code === '23505'
      ) {
        this.logger.warn(`‚ö†Ô∏è Email already exists: ${dto.email}`);
        throw new RpcException({
          statusCode: 409,
          message: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –ø–æ—à—Ç–æ—é ${dto.email} –≤–∂–µ —ñ—Å–Ω—É—î`,
        });
      }

      this.logger.error('‚ùå Unknown DB error during user creation', error);
      throw new RpcException({
        statusCode: 500,
        message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      });
    }
  }

  async getAllUsers(): Promise<User[]> {
    return this.userRepository.find({
      select: ['id', 'name', 'email', 'role', 'created_at'],
    });
  }

  async findUserByEmail(email: string): Promise<User | null> {
    return this.userRepository.findOne({ where: { email } });
  }

  async getUserById(id: string): Promise<User> {
    const user = await this.userRepository.findOne({
      where: { id },
      select: ['id', 'name', 'email', 'role', 'created_at'],
    });

    if (!user) {
      throw new NotFoundException(`User with ID ${id} not found`);
    }

    return user;
  }

  async login(email: string, password: string): Promise<Tokens> {
    this.logger.log('üîç –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ email...');

    // –û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—ñ–¥—Ç—è–≥—É—î–º–æ —Ä–æ–ª—å —á–µ—Ä–µ–∑ relations: ['role']
    const user = await this.userRepository.findOne({
      where: { email },
      relations: ['role'], // üëà –î–æ–¥–∞–Ω–æ!
    });

    if (!user) {
      throw new NotFoundException(`User with email ${email} not found`);
    }

    this.logger.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ' + user.id);
    this.logger.log('üîê –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å...');
    const isPasswordValid = await bcrypt.compare(password, user.password);
    this.logger.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–∞–ª—ñ–¥–Ω–∏–π: ' + isPasswordValid);

    if (!isPasswordValid) {
      throw new UnauthorizedException('Invalid credentials');
    }

    const payload = {
      member_id: user.id,
      role_id: user.role_id,
      role: user.role.name, // üëà –û–ë–û–í º–Ø–ó–ö–û–í–û –¥–æ–¥–∞—î–º–æ —Ä–æ–ª—å!
    };

    this.logger.log('üßæ –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω–∏...');
    // @ts-ignore
    return this.authService.generateTokens(payload);
  }


  async deleteUser(id: string): Promise<void> {
    const user = await this.userRepository.findOne({ where: { id } });
    if (!user) {
      throw new NotFoundException(`User with ID ${id} not found`);
    }
    await this.userRepository.delete(id);
  }

  async updateUser(
    id: string,
    data: { name: string; email: string; password: string },
  ): Promise<User> {
    const user = await this.userRepository.findOne({ where: { id } });
    if (!user) {
      throw new NotFoundException(`User with ID ${id} not found`);
    }

    user.name = data.name;
    user.email = data.email;
    user.password = await bcrypt.hash(data.password, 10);
    user.updated_at = new Date();

    return this.userRepository.save(user);
  }

  resetPassword(email: string): { message: string } {
    this.logger.log(`üîß Resetting password for email: ${email}`);
    return { message: `Reset password request processed for ${email}` };
  }
}
